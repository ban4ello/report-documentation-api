require('dotenv').config();
const pool = require('../db');

async function clearWorkers(userId = null) {
  const client = await pool.connect();

  try {
    // Get userId from environment variables if not provided
    const targetUserId = userId || process.env.USER_ID;
    const schemaName = targetUserId ? `user_${targetUserId}` : 'public';
    
    console.log(`–ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —Ç–∞–±–ª–∏—Ü—ã workers...`);
    console.log(`–¶–µ–ª–µ–≤–∞—è —Å—Ö–µ–º–∞: ${schemaName}\n`);

    // Set search path to target schema
    await client.query(`SET search_path TO ${schemaName}, public`);

    // First, count existing records
    const countResult = await client.query('SELECT COUNT(*) as count FROM workers');
    const currentCount = parseInt(countResult.rows[0].count);

    if (currentCount === 0) {
      console.log('‚ö†Ô∏è  –í —Ç–∞–±–ª–∏—Ü–µ workers –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      return;
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${currentCount}`);

    // Delete all workers
    const deleteResult = await client.query('DELETE FROM workers');

    console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${currentCount} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã workers –≤ —Å—Ö–µ–º–µ ${schemaName}`);

    // Show statistics
    const remainingCountResult = await client.query('SELECT COUNT(*) as count FROM workers');
    const remainingCount = parseInt(remainingCountResult.rows[0].count);
    console.log(`üìä –û—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π: ${remainingCount}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã:', error);
    throw error;
  } finally {
    client.release();
  }
}

// Get user ID from command line arguments
// Usage: node clear-workers.js [userId]
// Example: node clear-workers.js 1  (to clear user_1 schema)
// Example: node clear-workers.js    (to clear public schema)
const args = process.argv.slice(2);
const userId = args[0] ? parseInt(args[0], 10) : null;

if (userId !== null && isNaN(userId)) {
  console.error('‚ùå –û—à–∏–±–∫–∞: userId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
  process.exit(1);
}

// Get userId from environment or arguments
const finalUserId = userId || process.env.USER_ID;

// Ask for confirmation
if (finalUserId === null || finalUserId === undefined) {
  console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã workers –≤ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ö–µ–º–µ!');
  console.log('–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.\n');
} else {
  console.log(`‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã workers –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${finalUserId}!`);
  console.log(`–°—Ö–µ–º–∞: user_${finalUserId}`);
  console.log('–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.\n');
}

// Run the script
clearWorkers(finalUserId)
  .then(() => {
    console.log('\nüéâ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
    process.exit(1);
  });

