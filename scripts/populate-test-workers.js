require('dotenv').config();
const pool = require('../db');

// List of sample first and last names
const firstNames = [
  '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–î–º–∏—Ç—Ä–∏–π', '–ú–∞–∫—Å–∏–º', '–°–µ—Ä–≥–µ–π', '–ê–Ω–¥—Ä–µ–π',
  '–ê–ª–µ–∫—Å–µ–π', '–ê—Ä—Ç—ë–º', '–ò–ª—å—è', '–ö–∏—Ä–∏–ª–ª', '–ú–∏—Ö–∞–∏–ª',
  '–ò–≤–∞–Ω', '–†–æ–º–∞–Ω', '–î–∞–Ω–∏–∏–ª', '–ï–≤–≥–µ–Ω–∏–π', '–ù–∏–∫–∏—Ç–∞',
  '–ï–≥–æ—Ä', '–ü–∞–≤–µ–ª', '–ê–Ω—Ç–æ–Ω', '–ê—Ä—Å–µ–Ω–∏–π', '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω'
];

const lastNames = [
  '–ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä–æ–≤', '–°–º–∏—Ä–Ω–æ–≤', '–ö—É–∑–Ω–µ—Ü–æ–≤', '–ü–æ–ø–æ–≤',
  '–°–æ–∫–æ–ª–æ–≤', '–õ–µ–±–µ–¥–µ–≤', '–ö–æ–∑–ª–æ–≤', '–ù–æ–≤–∏–∫–æ–≤', '–ú–æ—Ä–æ–∑–æ–≤',
  '–ü–µ—Ç—Ä–æ–≤', '–í–æ–ª–∫–æ–≤', '–ê–ª–µ–∫—Å–µ–µ–≤', '–õ–µ–±–µ–¥–µ–≤', '–°–µ–º—ë–Ω–æ–≤',
  '–ï–≥–æ—Ä–æ–≤', '–ü–∞–≤–ª–æ–≤', '–ö–æ–∑–ª–æ–≤', '–°—Ç–µ–ø–∞–Ω–æ–≤', '–ù–∏–∫–æ–ª–∞–µ–≤'
];

async function populateTestWorkers(targetUserId = null) {
  const client = await pool.connect();

  try {
    // Get userId from environment variables if not provided
    const finalUserId = targetUserId || process.env.USER_ID;
    const schemaName = finalUserId ? `user_${finalUserId}` : 'public';
    
    console.log(`–ù–∞—á–∏–Ω–∞—é –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã workers —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...`);
    console.log(`–¶–µ–ª–µ–≤–∞—è —Å—Ö–µ–º–∞: ${schemaName}\n`);

    // Create an array of 10 test workers
    const workers = [];
    for (let i = 0; i < 10; i++) {
      const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
      const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];
      const position = Math.random() > 0.5 ? 'worker' : 'itr';

      workers.push({
        name: `${firstName} ${lastName}`,
        lastname: lastName,
        position: position
      });
    }

    // Set search path to target schema
    await client.query(`SET search_path TO ${schemaName}, public`);

    // Insert workers into database
    let insertedCount = 0;
    for (const worker of workers) {
      try {
        const result = await client.query(
          'INSERT INTO workers (name, lastname, position) VALUES ($1, $2, $3) RETURNING *',
          [worker.name, worker.lastname, worker.position]
        );

        const inserted = result.rows[0];
        console.log(`${insertedCount + 1}. –î–æ–±–∞–≤–ª–µ–Ω: ${inserted.name} (${inserted.position})`);
        insertedCount++;
      } catch (error) {
        if (error.code === '23505') {
          console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: ${worker.name}`);
        } else {
          throw error;
        }
      }
    }

    console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${insertedCount} –∏–∑ ${workers.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É workers`);
    
    // Show summary
    const summaryResult = await client.query('SELECT position, COUNT(*) as count FROM workers GROUP BY position');
    console.log('\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º:');
    summaryResult.rows.forEach(row => {
      console.log(`   ${row.position}: ${row.count}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', error);
    throw error;
  } finally {
    client.release();
  }
}

// Get user ID from command line arguments (optional)
// Usage: node populate-test-workers.js [userId]
// Example: node populate-test-workers.js 1  (to populate user_1 schema)
const args = process.argv.slice(2);
const userId = args[0] ? parseInt(args[0], 10) : null;

if (userId !== null && isNaN(userId)) {
  console.error('‚ùå –û—à–∏–±–∫–∞: userId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
  process.exit(1);
}

// Get userId from environment or arguments
const finalUserId = userId || process.env.USER_ID;

// Run the script
populateTestWorkers(finalUserId)
  .then(() => {
    console.log('\nüéâ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
    process.exit(1);
  });

