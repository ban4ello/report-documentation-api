require('dotenv').config();
const pool = require('../db');

async function clearParentCalculations(userId) {
  const client = await pool.connect();

  try {
    // Get userId from environment variables if not provided
    const targetUserId = userId || process.env.USER_ID;
    
    if (!targetUserId) {
      console.error('‚ùå –û—à–∏–±–∫–∞: userId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω');
      process.exit(1);
    }

    const schemaName = `user_${targetUserId}`;
    
    console.log(`–ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —Ç–∞–±–ª–∏—Ü—ã parent_calculation...`);
    console.log(`–¶–µ–ª–µ–≤–∞—è —Å—Ö–µ–º–∞: ${schemaName}\n`);

    // Set search path to target schema
    await client.query(`SET search_path TO ${schemaName}, public`);

    // First, count existing records
    const countResult = await client.query('SELECT COUNT(*) as count FROM parent_calculation');
    const currentCount = parseInt(countResult.rows[0].count);

    if (currentCount === 0) {
      console.log('‚ö†Ô∏è  –í —Ç–∞–±–ª–∏—Ü–µ parent_calculation –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      return;
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π parent_calculation: ${currentCount}`);

    // Count related calculations before deletion (will be deleted by CASCADE)
    const calculationsCount = await client.query('SELECT COUNT(*) as count FROM calculation');
    const relatedCalculationsCount = parseInt(calculationsCount.rows[0].count);
    
    if (relatedCalculationsCount > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π calculation: ${relatedCalculationsCount}`);
      console.log('(–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ calculations –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∫–∞—Å–∫–∞–¥–Ω–æ)\n');
    }

    // Delete all parent_calculation records
    // CASCADE will automatically delete all related calculations and their children
    const deleteResult = await client.query('DELETE FROM parent_calculation');

    console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${currentCount} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã parent_calculation`);
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${relatedCalculationsCount} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ (calculations)`);

    // Show statistics
    const remainingCountResult = await client.query('SELECT COUNT(*) as count FROM parent_calculation');
    const remainingCount = parseInt(remainingCountResult.rows[0].count);
    console.log(`üìä –û—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π –≤ parent_calculation: ${remainingCount}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã:', error);
    throw error;
  } finally {
    client.release();
  }
}

// Get user ID from command line arguments
// Usage: node clear-parent-calculations.js [userId]
// Example: node clear-parent-calculations.js 1  (to clear user_1 schema)
// Example: node clear-parent-calculations.js    (uses USER_ID from .env)
const args = process.argv.slice(2);
const userId = args[0] ? parseInt(args[0], 10) : null;

if (userId !== null && isNaN(userId)) {
  console.error('‚ùå –û—à–∏–±–∫–∞: userId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
  process.exit(1);
}

// Get userId from environment or arguments
const finalUserId = userId || process.env.USER_ID;

// Ask for confirmation
if (finalUserId === null || finalUserId === undefined) {
  console.log('‚ùå –û—à–∏–±–∫–∞: userId –Ω–µ —É–∫–∞–∑–∞–Ω');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node clear-parent-calculations.js [userId]');
  console.log('–ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è USER_ID');
  process.exit(1);
}

console.log(`‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã parent_calculation –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${finalUserId}!`);
console.log(`–°—Ö–µ–º–∞: user_${finalUserId}`);
console.log('–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.\n');

// Run the script
clearParentCalculations(finalUserId)
  .then(() => {
    console.log('\nüéâ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
    process.exit(1);
  });

