const db = require('../db');
const dbManager = require('../dbManager');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
// const camelize = (s) => s.replace(/_./g, (x) => x[1].toUpperCase());

class AuthController {
  async signupUser(req, res) {
    const { username, password, email, role = 'guest' } = req.body;

    console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { username, email, role });

    try {
      const hashedPassword = await bcrypt.hash(password, 10);
      console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω');

      const existingUser = await db.query('SELECT * FROM users WHERE email = $1', [email]);
      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

      if (existingUser.rows.length > 0) {
        console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        return res.status(401).json({ 
          message: '–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
          code: 'USER_ALREADY_EXISTS'
        });
      }

      const result = await db.query(
        'INSERT INTO users (username, password, email, role) VALUES ($1, $2, $3, $4) RETURNING id',
        [username, hashedPassword, email, role]
      );

      const userId = result.rows[0].id;
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: ${userId}`);

      // –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
        await dbManager.createUserDatabase(userId);
        console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
      } catch (dbError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', dbError);
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ë–î
        await db.query('DELETE FROM users WHERE id = $1', [userId]);
        console.log(`üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–¥–∞–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î`);
        return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
      }

      console.log('üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      res.status(201).json({ id: userId, email, username, role });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
    }
  }

  async loginUser(req, res) {
    const { email, password } = req.body;
  
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
      try {
        const loginAttempts = await db.query(
          'SELECT COUNT(*) FROM login_attempts WHERE email = $1 AND created_at > NOW() - INTERVAL \'15 minutes\'',
          [email]
        );
  
        if (parseInt(loginAttempts.rows[0].count) >= 5) {
          console.log(`üö´ Rate limit exceeded for email: ${email}`);
          return res.status(429).json({ 
            message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            retryAfter: 900
          });
        }
      } catch (rateLimitError) {
        // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã login_attempts –µ—â–µ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ login_attempts –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º rate limiting');
      }
  
      const result = await db.query('SELECT * FROM users WHERE email = $1', [email]);
  
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
      try {
        await db.query(
          'INSERT INTO login_attempts (email, success, ip_address) VALUES ($1, $2, $3)',
          [email, false, req.ip || req.connection.remoteAddress]
        );
      } catch (attemptsError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞ –≤ —Ç–∞–±–ª–∏—Ü—É');
      }
  
      if (result.rows.length === 0) {
        console.log(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email: ${email}`);
        return res.status(401).json({ 
          message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
          code: 'INVALID_CREDENTIALS'
        });
      }
  
      const user = result.rows[0];
      const isMatch = await bcrypt.compare(password, user.password);
      
      if (!isMatch) {
        console.log(`‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è email: ${email}`);
        return res.status(401).json({ 
          message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
          code: 'INVALID_CREDENTIALS'
        });
      }
  
      // –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ - –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ø—ã—Ç–∫–µ
      try {
        await db.query(
          'UPDATE login_attempts SET success = true WHERE email = $1 AND created_at > NOW() - INTERVAL \'1 minute\'',
          [email]
        );
      } catch (updateError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞');
      }
  
      const token = jwt.sign({ userId: user.id, role: user.role }, process.env.JWT_SECRET, { expiresIn: '24h' });
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}`);
      res.json({ 
        token, 
        user: { id: user.id, username: user.username, role: user.role, email: user.email } 
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ' });
    }
  }

  async logoutUser(req, res) {
    try {
      // –í JWT —Ç–æ–∫–µ–Ω–∞—Ö logout –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –ø—É—Ç–µ–º —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      // –ù–æ –º—ã –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è blacklist —Ç–æ–∫–µ–Ω–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      res.json({ message: '–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã' });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ' });
    }
  }
}

module.exports = new AuthController();
