const { Pool } = require('pg');

class DatabaseManager {
  constructor() {
    // –û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.mainDbConfig = {
      user: 'postgres',
      database: 'calculations',
      password: 'root',
      host: 'localhost',
      port: 5432,
    };
    
    this.mainPool = new Pool(this.mainDbConfig);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
  getMainConnection() {
    return this.mainPool;
  }

  // –°–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–º–µ—Å—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ë–î)
  async createUserDatabase(userId) {
    const client = await this.mainPool.connect();
    
    try {
      // –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await client.query(`CREATE SCHEMA IF NOT EXISTS user_${userId}`);
      console.log(`–°—Ö–µ–º–∞ user_${userId} —Å–æ–∑–¥–∞–Ω–∞`);
      
      // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.createUserTables(client, userId);
      
      console.log(`–°—Ö–µ–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ö–µ–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      throw error;
    } finally {
      client.release();
    }
  }


  // –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async createUserTables(client, userId) {
    const schemaName = `user_${userId}`;
    
    try {
      // –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      console.log(`–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ ${schemaName}...`);
      await this.createTablesProgrammatically(client, schemaName);
      console.log(`–¢–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ ${schemaName} —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ`);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ ${schemaName}:`, error);
      throw error;
    }
  }

  // –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)
  async createTablesProgrammatically(client, schemaName) {
    const tables = [
      `CREATE TABLE IF NOT EXISTS ${schemaName}.workers (
        id SERIAL PRIMARY KEY,
        date_of_creation TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        name VARCHAR(255),
        lastname VARCHAR(255),
        position VARCHAR(255)
      )`,
      
      `CREATE TABLE IF NOT EXISTS ${schemaName}.parent_calculation (
        id SERIAL PRIMARY KEY,
        title VARCHAR(255),
        date_of_creation TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      )`,
      
      `CREATE TABLE IF NOT EXISTS ${schemaName}.calculation (
        id SERIAL PRIMARY KEY,
        itr_worked_days DECIMAL,
        coeficient_of_nds DECIMAL,
        cost_of_electricity_per_day INTEGER,
        galvanized_value INTEGER,
        number_of_days_per_shift INTEGER,
        number_of_hours_per_shift INTEGER,
        rental_cost_per_day INTEGER,
        profitability_coeficient DECIMAL,
        title VARCHAR(255),
        transport_value INTEGER,
        date_of_creation TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        last_edit_date TIMESTAMP,
        parent_calculation_id INTEGER,
        calculation_type VARCHAR(255),
        consumables_data JSON,
        hardware_data JSON,
        metal_data JSON,
        total_metal_per_item DECIMAL,
        total_processing_per_item DECIMAL,
        total_profitability_per_item DECIMAL,
        total DECIMAL,
        FOREIGN KEY (parent_calculation_id) REFERENCES ${schemaName}.parent_calculation(id) ON DELETE CASCADE
      )`,
      
      `CREATE TABLE IF NOT EXISTS ${schemaName}.specification_data (
        id SERIAL PRIMARY KEY,
        notes VARCHAR(255),
        date_of_creation TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        calculation_id INTEGER,
        FOREIGN KEY (calculation_id) REFERENCES ${schemaName}.calculation(id) ON DELETE CASCADE
      )`,
      
      `CREATE TABLE IF NOT EXISTS ${schemaName}.specification_data_table (
        id SERIAL PRIMARY KEY,
        date_of_creation TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        name VARCHAR(255),
        quantity INTEGER,
        value_per_unit DECIMAL,
        unit_of_measurement VARCHAR(255),
        total_weight INTEGER,
        specification_data_id INTEGER,
        FOREIGN KEY (specification_data_id) REFERENCES ${schemaName}.specification_data(id) ON DELETE CASCADE
      )`,
      
      `CREATE TABLE IF NOT EXISTS ${schemaName}.workers_data (
        id SERIAL PRIMARY KEY,
        notes VARCHAR(255),
        date_of_creation TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        calculation_id INTEGER,
        FOREIGN KEY (calculation_id) REFERENCES ${schemaName}.calculation(id) ON DELETE CASCADE
      )`,
      
      `CREATE TABLE IF NOT EXISTS ${schemaName}.workers_data_table (
        id SERIAL PRIMARY KEY,
        date_of_creation TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        name VARCHAR(255),
        number_of_hours_worked INTEGER,
        salary_per_day INTEGER,
        salary_per_hour INTEGER,
        total DECIMAL,
        workers_data_id INTEGER,
        FOREIGN KEY (workers_data_id) REFERENCES ${schemaName}.workers_data(id) ON DELETE CASCADE
      )`,
      
      `CREATE TABLE IF NOT EXISTS ${schemaName}.itr_data (
        id SERIAL PRIMARY KEY,
        notes VARCHAR(255),
        date_of_creation TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        calculation_id INTEGER,
        FOREIGN KEY (calculation_id) REFERENCES ${schemaName}.calculation(id) ON DELETE CASCADE
      )`,
      
      `CREATE TABLE IF NOT EXISTS ${schemaName}.itr_data_table (
        id SERIAL PRIMARY KEY,
        date_of_creation TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        name VARCHAR(255),
        salary_per_month INTEGER,
        itr_data_id INTEGER,
        FOREIGN KEY (itr_data_id) REFERENCES ${schemaName}.itr_data(id) ON DELETE CASCADE
      )`,
      
      `CREATE TABLE IF NOT EXISTS ${schemaName}.workers_tax_data (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255),
        coefficient DECIMAL,
        coefficient_a DECIMAL,
        coefficient_b DECIMAL,
        key VARCHAR(255),
        subtotal DECIMAL,
        total DECIMAL,
        calculation_id INTEGER,
        order_id INTEGER,
        FOREIGN KEY (calculation_id) REFERENCES ${schemaName}.calculation(id) ON DELETE CASCADE
      )`,
      
      `CREATE TABLE IF NOT EXISTS ${schemaName}.itr_tax_data (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255),
        coefficient DECIMAL,
        coefficient_a DECIMAL,
        coefficient_b DECIMAL,
        key VARCHAR(255),
        subtotal DECIMAL,
        total DECIMAL,
        calculation_id INTEGER,
        order_id INTEGER,
        FOREIGN KEY (calculation_id) REFERENCES ${schemaName}.calculation(id) ON DELETE CASCADE
      )`
    ];

    for (const tableQuery of tables) {
      try {
        await client.query(tableQuery);
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å—Ö–µ–º–µ ${schemaName}`);
      } catch (error) {
        if (error.code === '42P07') {
          console.log(`‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å—Ö–µ–º–µ ${schemaName}`);
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ ${schemaName}:`, error.message);
          throw error;
        }
      }
    }
    
    console.log(`üéâ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ ${schemaName} —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ`);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ö–µ–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserConnection(userId) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º query, –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ö–µ–º—É –ø–æ–∏—Å–∫–∞
    return {
      query: async (query, params) => {
        const client = await this.mainPool.connect();
        try {
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ö–µ–º—É –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await client.query(`SET search_path TO user_${userId}, public`);
          return await client.query(query, params);
        } finally {
          client.release();
        }
      }
    };
  }

  // –£–¥–∞–ª–∏—Ç—å —Å—Ö–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async deleteUserDatabase(userId) {
    const client = await this.mainPool.connect();
    
    try {
      // –£–¥–∞–ª—è–µ–º —Å—Ö–µ–º—É —Å–æ –≤—Å–µ–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
      await client.query(`DROP SCHEMA IF EXISTS user_${userId} CASCADE`);
      
      console.log(`–°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ö–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      throw error;
    } finally {
      client.release();
    }
  }

  // –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async closeAll() {
    await this.mainPool.end();
  }
}

module.exports = new DatabaseManager();
